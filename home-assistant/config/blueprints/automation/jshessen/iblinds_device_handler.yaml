# ==========================================================
# iBlinds Device Detection & Management
# Home Assistant Automation Blueprint
# ----------------------------------------------------------
# Version: 1.0.0
# Author: Community Contribution
# Blueprint Exchange Ready
# ----------------------------------------------------------
# - Full v2 automation: open/close/position
# - v3 detection: user guidance for Z-Wave JS configuration
# - Robust device analysis and notification logic
# ==========================================================

blueprint:
  name: iBlinds Device Detection & Management
  description: |
    **Comprehensive iBlinds Z-Wave Management**
    
    Automatically detects and manages iBlinds devices with version-specific handling:
    
    • **iBlinds v2**: Full automation control with positioning, calibration, and direction reversal
    • **iBlinds v3**: Smart detection with Z-Wave JS configuration guidance
    • **Multi-Device**: Supports managing multiple iBlinds devices simultaneously
    • **Smart Notifications**: Configurable alerts for device detection and actions
    
    **Key Features:**
    - Automatic version detection (v2/v3)
    - Direction reversal for different mounting orientations  
    - Custom positioning with event-driven control
    - Comprehensive device analysis and reporting
    - Direct Z-Wave JS configuration links for v3 devices
    
    **Perfect for:**
    - Mixed v2/v3 environments
    - Multiple room setups
    - Users wanting optimal v3 performance via native Z-Wave parameters
    
    [Documentation & Support](https://community.home-assistant.io/search?q=iblinds)

  domain: automation
  author: Community Contribution
  homeassistant:
    min_version: 2023.3.0

  input:
    iblinds_entities:
      name: iBlinds Devices
      description: |
        Select your iBlinds cover/blind entities. Both v2 and v3 devices are supported:
        - **v2 devices**: Will be fully managed by this automation
        - **v3 devices**: Will be detected and you'll receive configuration guidance
        
        Multiple devices can be managed in a single automation.
      selector:
        entity:
          multiple: true
          filter:
            - domain: cover
            - device_class: blind
      default: []

    # v3 Specific Section
    v3_config_section:
      name: "🔧 iBlinds v3 Configuration (Read-Only Detection)"
      collapsed: true
      description: |
        **iBlinds v3 devices are detected but not directly controlled by this blueprint.**
        
        For optimal performance, v3 devices should be configured using their 10 native Z-Wave configuration parameters.
        
        **Why use native Z-Wave parameters for v3?**
        - More precise control than Home Assistant automations
        - Manufacturer-intended operation
        - Avoids potential conflicts
        - Better reliability and performance
        
        **How to configure v3 devices:**
        1. Go to: Settings → Devices & Services → Z-Wave JS
        2. Find your iBlinds v3 device
        3. Click "Configure" to access all 10 native parameters
        
        **Available v3 Parameters:**
        - Close Interval (calibration tightness)
        - Reverse Direction
        - Default ON Position  
        - Speed Control
        - Tilt Limits (Min/Max)
        - Remote Calibration
        - And more...
        
        [📖 Full v3 Parameter Guide](https://support.myiblinds.com/knowledge-base/configuration-parameters-settings-v3/)
    
    # v2 Management Section  
    v2_config_section:
      name: "⚙️ iBlinds v2 Operation Settings"
      collapsed: false
      description: |
        **Configure how your iBlinds v2 devices operate through Home Assistant.**
        
        These settings only affect v2 devices detected by the blueprint.
      input:
        default_on_value:
          name: Default Open Position
          description: |
            Position percentage (0-100) that v2 devices will open to when the "open" command is used.
            
            **Examples:**
            - 50% = Half open
            - 75% = Mostly open  
            - 25% = Slightly open
          selector:
            number:
              min: 0
              max: 100
              step: 5
              unit_of_measurement: "%"
          default: 50
        
        reverse_direction:
          name: Reverse Direction
          description: |
            **Enable if your blinds move in the wrong direction.**
            
            When enabled:
            - 0% becomes 100% and vice versa
            - Useful for different mounting orientations  
            - Automatically handled in all position commands
          selector:
            boolean:
          default: false

    # Notification Section
    notification_section:
      name: "🔔 Notification & Reporting"
      collapsed: true
      description: |
        Configure notifications to stay informed about your iBlinds devices.
        Notifications help track device detection, actions, and provide v3 configuration reminders.
      input:
        notify_v3_detection:
          name: Notify When v3 Devices Found
          description: |
            **Recommended: Keep enabled**
            
            Sends a helpful notification when v3 devices are detected, including:
            - Direct links to Z-Wave JS configuration  
            - Reminder about optimal v3 setup
            - List of detected v3 devices
          selector:
            boolean:
          default: true
          
        device_detection_report:
          name: Detailed Device Analysis Report
          description: |
            Generate comprehensive reports showing:
            - All detected devices and their versions
            - Device capabilities and current states
            - Manufacturer and model information
            - Configuration recommendations
            
            **Note:** Can be verbose - useful for setup and troubleshooting
          selector:
            boolean:
          default: false
          
        notification_service_predefined:
          name: Notification Method
          description: Choose how you want to receive notifications
          default: "persistent_notification.create"
          selector:
            select:
              options:
                - label: "Persistent Notification (Recommended)"
                  value: "persistent_notification.create"
                - label: "Logbook Entry"
                  value: "logbook.log"
                - label: "System Log"
                  value: "system_log.write"
                - label: "None (Disable Notifications)"
                  value: ""
                  
        notification_service_custom:
          name: Custom Notification Service (Optional)
          description: |
            **Advanced:** Use a custom notify service instead of the predefined options.
            
            **Examples:**
            - `notify.mobile_app_your_phone`
            - `notify.telegram`  
            - `notify.discord`
            
            Leave empty to use the predefined method above.
          default: ""
          selector:
            text:

variables:
  # Input processing
  iblinds_entities: !input iblinds_entities
  default_on_value: !input default_on_value
  reverse_direction: !input reverse_direction
  device_detection_report: !input device_detection_report
  notify_v3_detection: !input notify_v3_detection
  notification_service_predefined: !input notification_service_predefined
  notification_service_custom: !input notification_service_custom

  # Normalize entity list (handle single entity or list)
  selected_entities: >
    {% if iblinds_entities is string %}
      {{ [iblinds_entities] }}
    {% else %}
      {{ iblinds_entities | default([]) }}
    {% endif %}

  # Position calculations for v2 devices
  calculated_off_position: >
    {{ 100 if reverse_direction else 0 }}
  
  calculated_default_position: >
    {{ (100 - default_on_value) if reverse_direction else default_on_value }}
  
  calculated_relative_position: >
    {% set pos = (trigger.event.data.service_data.position if trigger.event.data.service_data is defined and trigger.event.data.service_data.position is defined else default_on_value) %}
    {{ (100 - pos) if reverse_direction else pos }}

  # Notification service resolution
  notification_service: >
    {% if notification_service_custom is defined and notification_service_custom | trim != "" %}
      {{ notification_service_custom }}
    {% elif notification_service_predefined is defined and notification_service_predefined != "" %}
      {{ notification_service_predefined }}
    {% else %}
      ""
    {% endif %}

  # Target entities from event data
  target_entities: >
    {% if trigger.event.data.service_data is defined and trigger.event.data.service_data.entity_id is defined %}
      {% set entities = trigger.event.data.service_data.entity_id %}
      {% if entities is string %}
        {{ [entities] }}
      {% else %}
        {{ entities | default([]) }}
      {% endif %}
    {% endif %}

  # Advanced device analysis with comprehensive detection logic
  device_analysis: >
    {%- macro analyze_devices(entities, index=0, v2=[], v3=[], other=[]) -%}
      {%- if index >= entities | length %}
        {{- {
          'v2_devices': v2 | map(attribute='entity_id') | list,
          'v3_devices': v3 | map(attribute='entity_id') | list,
          'other_devices': other | map(attribute='entity_id') | list,
          'analysis_results': v2 + v3 + other,
          'v3_device_details': v3,
          'total_devices': entities | length,
          'v2_count': v2 | length,
          'v3_count': v3 | length,
          'other_count': other | length
        } | tojson -}}
      {%- else %}
        {%- set entity_id = entities[index] %}
        {%- set entity_state = states(entity_id) %}
        {%- if entity_state not in ['unknown'] and entity_state is not none %}
          {%- set dev_id = device_id(entity_id) %}
          {%- set manufacturer = device_attr(dev_id, 'manufacturer') | default('unknown') | lower %}
          {%- set model = device_attr(dev_id, 'model') | default('unknown') | lower %}
          {%- set sw_version = device_attr(dev_id, 'sw_version') | default('unknown') %}
          {%- set current_position = state_attr(entity_id, 'current_position') %}
          {%- set friendly_name = state_attr(entity_id, 'friendly_name') | default(entity_id) %}
          {%- set has_tilt = state_attr(entity_id, 'current_tilt_position') is not none %}
          {%- set supported_features = state_attr(entity_id, 'supported_features') | default(0) %}
          
          {%- set device_info = {
            'entity_id': entity_id,
            'friendly_name': friendly_name,
            'state': entity_state,
            'current_position': current_position,
            'device_id': dev_id,
            'manufacturer': manufacturer,
            'model': model,
            'sw_version': sw_version,
            'has_tilt': has_tilt,
            'supported_features': supported_features,
            'detected_version': 'unknown'
          } %}
          
          {# Primary detection: Model-based #}
          {%- if 'v3' in model or '3.0' in model or 'gen3' in model %}
            {%- set device_info = dict(device_info, **{'detected_version': 'v3'}) %}
            {{- analyze_devices(entities, index + 1, v2, v3 + [device_info], other) -}}
          {%- elif 'v2' in model or '2.0' in model or 'gen2' in model or 'ib2.0' in model %}
            {%- set device_info = dict(device_info, **{'detected_version': 'v2'}) %}
            {{- analyze_devices(entities, index + 1, v2 + [device_info], v3, other) -}}
          {# Manufacturer-based detection with capability fallback #}
          {%- elif 'hab' in manufacturer or 'iblind' in manufacturer or 'myiblinds' in manufacturer %}
            {%- if has_tilt %}
              {%- set device_info = dict(device_info, **{'detected_version': 'v3-tilt'}) %}
              {{- analyze_devices(entities, index + 1, v2, v3 + [device_info], other) -}}
            {%- elif current_position is not none %}
              {%- set device_info = dict(device_info, **{'detected_version': 'v2-position'}) %}
              {{- analyze_devices(entities, index + 1, v2 + [device_info], v3, other) -}}
            {%- else %}
              {%- set device_info = dict(device_info, **{'detected_version': 'unknown-iblinds'}) %}
              {{- analyze_devices(entities, index + 1, v2, v3, other + [device_info]) -}}
            {%- endif %}
          {%- else %}
            {%- set device_info = dict(device_info, **{'detected_version': 'non-iblinds'}) %}
            {{- analyze_devices(entities, index + 1, v2, v3, other + [device_info]) -}}
          {%- endif %}
        {%- else %}
          {%- set device_info = {
            'entity_id': entity_id,
            'friendly_name': entity_id,
            'state': entity_state | default('unavailable'),
            'current_position': none,
            'device_id': none,
            'manufacturer': 'unknown',
            'model': 'unknown',
            'sw_version': 'unknown',
            'has_tilt': false,
            'supported_features': 0,
            'detected_version': 'unavailable'
          } %}
          {{- analyze_devices(entities, index + 1, v2, v3, other + [device_info]) -}}
        {%- endif %}
      {%- endif %}
    {%- endmacro %}
    
    {% set results_json = analyze_devices(selected_entities) %}
    {{ results_json | from_json }}

# Event triggers for cover services
trigger:
  - platform: event
    event_type: call_service
    event_data:
      domain: cover
      service: open_cover
  - platform: event
    event_type: call_service
    event_data:
      domain: cover
      service: close_cover
  - platform: event
    event_type: call_service
    event_data:
      domain: cover
      service: set_cover_position
  - platform: event
    event_type: call_service
    event_data:
      domain: automation
      service: trigger
  - platform: event
    event_type: automation_reloaded

# Only proceed with valid entities or reload events
condition:
  - condition: template
    value_template: >
      {{ selected_entities | length > 0 or 
         (trigger.event is defined and trigger.event.event_type == 'automation_reloaded') }}

# Main automation logic
action:
  - choose:
      # Handle close_cover for v2 devices
      - conditions:
          - condition: template
            value_template: >
              {{ trigger.event.data.service_data is defined and
                 trigger.event.data.service == 'close_cover' and
                 device_analysis.v2_devices | length > 0 and
                 target_entities | length > 0 }}
        sequence:
          - service: cover.set_cover_position
            target:
              entity_id: >
                {{ target_entities | select('in', device_analysis.v2_devices) | list }}
            data:
              position: "{{ calculated_off_position }}"

      # Handle open_cover for v2 devices  
      - conditions:
          - condition: template
            value_template: >
              {{ trigger.event.data.service_data is defined and
                 trigger.event.data.service == 'open_cover' and
                 device_analysis.v2_devices | length > 0 and
                 target_entities | length > 0 }}
        sequence:
          - service: cover.set_cover_position
            target:
              entity_id: >
                {{ target_entities | select('in', device_analysis.v2_devices) | list }}
            data:
              position: "{{ calculated_default_position }}"

      # Handle set_cover_position for v2 devices
      - conditions:
          - condition: template
            value_template: >
              {{ device_analysis.v2_devices | length > 0 and
                 target_entities | length > 0 }}
        sequence:               
          - service: cover.set_cover_position
            target:
              entity_id: >
                {{ target_entities | select('in', device_analysis.v2_devices) | list }}
            data:
              position: "{{ calculated_relative_position }}"

  # Parallel notification and reporting actions
  - parallel:
      # Detailed device detection report
      - if:
          - condition: template
            value_template: >
              {{ notification_service | trim != '' and device_detection_report }}
        then:
          - service: "{{ notification_service }}"
            data:
              title: "🔍 iBlinds Device Analysis Report"
              message: >
                **Device Detection Summary ({{ device_analysis.total_devices }} total):**
                
                **✅ iBlinds v2 Devices ({{ device_analysis.v2_count }}):**
                {% for result in device_analysis.analysis_results %}
                  {% if result.detected_version.startswith('v2') %}
                - **{{ result.friendly_name }}** ({{ result.entity_id }})
                  - Model: {{ result.model }}
                  - Position: {{ result.current_position }}%
                  - Status: Ready for automation control
                  {% endif %}
                {% endfor %}
                
                **⚠️ iBlinds v3 Devices ({{ device_analysis.v3_count }}):**
                {% for result in device_analysis.analysis_results %}
                  {% if result.detected_version.startswith('v3') %}
                - **{{ result.friendly_name }}** ({{ result.entity_id }})
                  - Model: {{ result.model }}
                  - Tilt Control: {{ result.has_tilt }}
                  - **Recommendation:** Configure via Z-Wave JS native parameters
                  {% endif %}
                {% endfor %}
                
                **ℹ️ Other Devices ({{ device_analysis.other_count }}):**
                {% for result in device_analysis.analysis_results %}
                  {% if not result.detected_version.startswith('v2') and not result.detected_version.startswith('v3') %}
                - **{{ result.friendly_name }}** ({{ result.entity_id }})
                  - Type: {{ result.detected_version }}
                  - Manufacturer: {{ result.manufacturer }}
                  {% endif %}
                {% endfor %}

      # v3 device detection notification
      - if:
          - condition: template
            value_template: >
              {{ notification_service | trim != '' and 
                 notify_v3_detection and 
                 device_analysis.v3_count > 0 }}
        then:
          - service: "{{ notification_service }}"
            data:
              title: "🎛️ iBlinds v3 Devices Detected"
              message: >
                **⚠️ Found iBlinds v3 Devices ({{ device_analysis.v3_count }}):**<br>
                {% set zwave_config_entry_id = state_attr('zwave_js.config_entries', 'entry_id') %}
                {% for entity in device_analysis.v3_devices %}
                  {%- set dev_id = device_id(entity) %}
                  {% set name = state_attr(entity, 'friendly_name') or entity %}
                  {% if dev_id %}
                  - [ {{ name }} ](/config/zwave_js/node_config/{{ dev_id }}?config_entry={{ zwave_config_entry_id }})
                  {% endif %}
                {% endfor %}
                
                **📋 Next Steps:**<br>
                  1. Find each v3 device listed above (click links if available)
                  2. Configure the 10 available parameters for optimal performance
                
                **🔗 Helpful Links:**
                  - [v3 Configuration Guide](https://support.myiblinds.com/knowledge-base/configuration-parameters-settings-v3/)
                
                **💡 Why use native Z-Wave parameters?**<br>
                Native parameters provide more precise control, better performance, and manufacturer-intended operation compared to Home Assistant automations.

      # Action completion notification
      - if:
          - condition: template
            value_template: >
              {{ notification_service | trim != '' and 
                 not device_detection_report and
                 trigger.event.data.service_data is defined and
                 target_entities | length > 0 }}
        then:
          - service: "{{ notification_service }}"
            data:
              title: "✅ iBlinds Action Complete"
              message: >
                **Action:** {{ trigger.event.data.service | replace('_', ' ') | title }}
                
                **Controlled Devices:** {{ (target_entities | select('in', device_analysis.v2_devices) | list) | length }} v2 device(s)
                
                {% if device_analysis.v3_count > 0 %}
                **Note:** {{ device_analysis.v3_count }} v3 device(s) detected but not controlled (configure via Z-Wave JS for best results)
                {% endif %}